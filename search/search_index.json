{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proyecto de Software 2020 \u00b6 En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Home"},{"location":"#proyecto-de-software-2020","text":"En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Proyecto de Software 2020"},{"location":"commands/","text":"Comandos \u00b6 En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows. Comandos de consola \u00b6 pwd # Imprime el directorio actual. ls # Lista todos los archivos y directorios del directorio actual. ls -a # Igual que el anterior pero unlcuye los ocultos. mkdir dirname # Crea un nuevo directorio en el actual llamado \"dirname\". touch filename # Crea un archivo en el directorio actual llamado \"filename\". cd code/python # Se nueve al directorio \"code/python\". Comandos de git \u00b6 git status # Muestra el estado de los archivos respecto al repositorio. git add <filename> # Agrega el archivo filename al versionado de git. git add . # Agrega todos los archivos que sufieron una modificaci\u00f3n el versionado. git commit -m <mensaje> # Genera un commit con todos los archivos que fueron modificados y gregados a git. Documenta el commit con el mensaje que escribamos. git checkout -b <branch_name> # Genera una nueva rama localmente con el nombre <branch_name>. Y se mueve a esa rama. git checkout <branch_name> # Se mueve a la rama <branch_name> local y si no existe la crea y se mueve. git push origin <branch_name> # Se suben los commits locales a la rama <branch_name> ubicada en el remote con nombre origin. git pull origin <branch_name> # Descarga los commits que est\u00e9n en la rama del remote origin para la rama <branch_name>.","title":"Comandos"},{"location":"commands/#comandos","text":"En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows.","title":"Comandos"},{"location":"commands/#comandos-de-consola","text":"pwd # Imprime el directorio actual. ls # Lista todos los archivos y directorios del directorio actual. ls -a # Igual que el anterior pero unlcuye los ocultos. mkdir dirname # Crea un nuevo directorio en el actual llamado \"dirname\". touch filename # Crea un archivo en el directorio actual llamado \"filename\". cd code/python # Se nueve al directorio \"code/python\".","title":"Comandos de consola"},{"location":"commands/#comandos-de-git","text":"git status # Muestra el estado de los archivos respecto al repositorio. git add <filename> # Agrega el archivo filename al versionado de git. git add . # Agrega todos los archivos que sufieron una modificaci\u00f3n el versionado. git commit -m <mensaje> # Genera un commit con todos los archivos que fueron modificados y gregados a git. Documenta el commit con el mensaje que escribamos. git checkout -b <branch_name> # Genera una nueva rama localmente con el nombre <branch_name>. Y se mueve a esa rama. git checkout <branch_name> # Se mueve a la rama <branch_name> local y si no existe la crea y se mueve. git push origin <branch_name> # Se suben los commits locales a la rama <branch_name> ubicada en el remote con nombre origin. git pull origin <branch_name> # Descarga los commits que est\u00e9n en la rama del remote origin para la rama <branch_name>.","title":"Comandos de git"}]}