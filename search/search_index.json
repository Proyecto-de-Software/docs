{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proyecto de Software 2020 \u00b6 En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Home"},{"location":"#proyecto-de-software-2020","text":"En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Proyecto de Software 2020"},{"location":"01_commands/","text":"Comandos \u00b6 En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows. Comandos de consola \u00b6 # Imprimir el directorio actual. pwd # Listar todos los archivos y directorios del directorio actual. ls # Igual que el anterior pero incluye los archivos y directorios ocultos. ls -a # Crear un nuevo directorio en el actual llamado \"dirname\". mkdir dirname # Crear un archivo en el directorio actual llamado \"filename\". touch filename # Moverse al directorio \"code/python\". cd code/python Comandos de git \u00b6 # Mostrar el estado de los archivos respecto al repositorio. git status # Agregar el archivo filename al versionado de git. git add <filename> # Agregar todos los archivos que sufieron una modificaci\u00f3n al versionado. git add . # Generar un commit con todos los archivos que fueron modificados y agregados a # git. Documenta el commit con el mensaje que escribamos. git commit -m <mensaje> # Generar una nueva rama localmente con el nombre <branch_name>. Y moverse a # esa rama. git checkout -b <branch_name> # Moverse a la rama <branch_name> local y si no existe la crea y se mueve. git checkout <branch_name> # Subir los cambios en commits locales a la rama <branch_name> ubicada en el # remote con nombre origin. git push origin <branch_name> # Descargar cambios en commits que est\u00e9n en la rama del remote origin para la # rama <branch_name>. git pull origin <branch_name> # Fusionar la rama <branch_name> dentro de la rama actual. git merge <branch_name>","title":"Comandos"},{"location":"01_commands/#comandos","text":"En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows.","title":"Comandos"},{"location":"01_commands/#comandos-de-consola","text":"# Imprimir el directorio actual. pwd # Listar todos los archivos y directorios del directorio actual. ls # Igual que el anterior pero incluye los archivos y directorios ocultos. ls -a # Crear un nuevo directorio en el actual llamado \"dirname\". mkdir dirname # Crear un archivo en el directorio actual llamado \"filename\". touch filename # Moverse al directorio \"code/python\". cd code/python","title":"Comandos de consola"},{"location":"01_commands/#comandos-de-git","text":"# Mostrar el estado de los archivos respecto al repositorio. git status # Agregar el archivo filename al versionado de git. git add <filename> # Agregar todos los archivos que sufieron una modificaci\u00f3n al versionado. git add . # Generar un commit con todos los archivos que fueron modificados y agregados a # git. Documenta el commit con el mensaje que escribamos. git commit -m <mensaje> # Generar una nueva rama localmente con el nombre <branch_name>. Y moverse a # esa rama. git checkout -b <branch_name> # Moverse a la rama <branch_name> local y si no existe la crea y se mueve. git checkout <branch_name> # Subir los cambios en commits locales a la rama <branch_name> ubicada en el # remote con nombre origin. git push origin <branch_name> # Descargar cambios en commits que est\u00e9n en la rama del remote origin para la # rama <branch_name>. git pull origin <branch_name> # Fusionar la rama <branch_name> dentro de la rama actual. git merge <branch_name>","title":"Comandos de git"},{"location":"02_ssh/","text":"SSH \u00b6 La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor. Requisitos \u00b6 Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash. Generaci\u00f3n de clave \u00b6 Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este passphrase no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando bash ssh-keygen -p -f /path/to/ssh_key Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+ Tus claves fueron generadas en el directorio /your_home/.ssh : /your_home/.ssh/id_rsa.pub es tu clave p\u00fablica, y la que deber\u00e1s configurar en los servicios que quieras hacer uso con este mecanismo. /your_home/.ssh/id_rsa , es tu clave privada. Es importante que no pierdas nunca este archivo ya que no vas a poder recuperarlo. Adem\u00e1s tampoco debes compartir el mismo ya que cualquier persona con dicha clave podr\u00eda tomar tu identidad. En nuesto caso, la clave p\u00fablica deber\u00e1 ser configurada en el servicio de Gitlab para autenticarnos de forma autom\u00e1tica a la hora de interactuar con el repositorio. Esto evita que tengamos que ingresar usuario y clave en cada operaci\u00f3n. En la siguiente gu\u00eda se explica como dar de alta nuestra clave ssh en Gitlab","title":"Ssh"},{"location":"02_ssh/#ssh","text":"La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor.","title":"SSH"},{"location":"02_ssh/#requisitos","text":"Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash.","title":"Requisitos"},{"location":"02_ssh/#generacion-de-clave","text":"Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este passphrase no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando bash ssh-keygen -p -f /path/to/ssh_key Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+ Tus claves fueron generadas en el directorio /your_home/.ssh : /your_home/.ssh/id_rsa.pub es tu clave p\u00fablica, y la que deber\u00e1s configurar en los servicios que quieras hacer uso con este mecanismo. /your_home/.ssh/id_rsa , es tu clave privada. Es importante que no pierdas nunca este archivo ya que no vas a poder recuperarlo. Adem\u00e1s tampoco debes compartir el mismo ya que cualquier persona con dicha clave podr\u00eda tomar tu identidad. En nuesto caso, la clave p\u00fablica deber\u00e1 ser configurada en el servicio de Gitlab para autenticarnos de forma autom\u00e1tica a la hora de interactuar con el repositorio. Esto evita que tengamos que ingresar usuario y clave en cada operaci\u00f3n. En la siguiente gu\u00eda se explica como dar de alta nuestra clave ssh en Gitlab","title":"Generaci\u00f3n de clave"},{"location":"03_ssh_gitlab/","text":"Agregar la clave SSH en Gitlab \u00b6 Primero necesitamos crear nuestra clave SSH y copiarla en el clipboard. Esto se puede ver en esta gu\u00eda . Luego debe ir al Gitlab de la c\u00e1tedra https://gitlab.catedras.linti.unlp.edu.ar/ e iniciar sesi\u00f3n. Selecciona en tu avatar en la esquina superior derecha y hace click en C\u00f3nfiguraci\u00f3n . Selecciona Claves SSH . Pega la clave p\u00fablica que copiaste en el paso uno en el textarea. Asegurate de incluir un nombre descriptivo a tu clave en el input T\u00edtulo , como PC de casa . Opcionalmente se puede poner una fecha de expiraci\u00f3n a la clave. Selecciona el bot\u00f3n A\u00f1adir clave","title":"Ssh Gitlab"},{"location":"03_ssh_gitlab/#agregar-la-clave-ssh-en-gitlab","text":"Primero necesitamos crear nuestra clave SSH y copiarla en el clipboard. Esto se puede ver en esta gu\u00eda . Luego debe ir al Gitlab de la c\u00e1tedra https://gitlab.catedras.linti.unlp.edu.ar/ e iniciar sesi\u00f3n. Selecciona en tu avatar en la esquina superior derecha y hace click en C\u00f3nfiguraci\u00f3n . Selecciona Claves SSH . Pega la clave p\u00fablica que copiaste en el paso uno en el textarea. Asegurate de incluir un nombre descriptivo a tu clave en el input T\u00edtulo , como PC de casa . Opcionalmente se puede poner una fecha de expiraci\u00f3n a la clave. Selecciona el bot\u00f3n A\u00f1adir clave","title":"Agregar la clave SSH en Gitlab"},{"location":"04_instalar_git/","text":"Gu\u00eda de Git \u00b6 En la explicaci\u00f3n pr\u00e1ctica hablamos sobre los conceptos de git . Instalaci\u00f3n \u00b6 En Debian-based \u00b6 sudo apt update sudo apt upgrade sudo apt install git En Red Hat-based \u00b6 sudo yum upgrade sudo yum install git En Arch-based \u00b6 sudo pacman -S git En MacOS \u00b6 brew install git En Windows \u00b6 Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale. Crear una cuenta de Github \u00b6 Para crear una cuenta tienen que entrar a la web de Github y registrarse (Sing up). \u00bfC\u00f3mo usar Git? \u00b6 Vamos a ver dos formas para comenzar a trabajar con Git : Creando un repositorio desde cero y agregando los archivos iniciales. Descargando un proyecto ya creado y modificarlo. Configurar informaci\u00f3n en Git \u00b6 En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list","title":"Instalar Git"},{"location":"04_instalar_git/#guia-de-git","text":"En la explicaci\u00f3n pr\u00e1ctica hablamos sobre los conceptos de git .","title":"Gu\u00eda de Git"},{"location":"04_instalar_git/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"04_instalar_git/#en-debian-based","text":"sudo apt update sudo apt upgrade sudo apt install git","title":"En Debian-based"},{"location":"04_instalar_git/#en-red-hat-based","text":"sudo yum upgrade sudo yum install git","title":"En Red Hat-based"},{"location":"04_instalar_git/#en-arch-based","text":"sudo pacman -S git","title":"En Arch-based"},{"location":"04_instalar_git/#en-macos","text":"brew install git","title":"En MacOS"},{"location":"04_instalar_git/#en-windows","text":"Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale.","title":"En Windows"},{"location":"04_instalar_git/#crear-una-cuenta-de-github","text":"Para crear una cuenta tienen que entrar a la web de Github y registrarse (Sing up).","title":"Crear una cuenta de Github"},{"location":"04_instalar_git/#como-usar-git","text":"Vamos a ver dos formas para comenzar a trabajar con Git : Creando un repositorio desde cero y agregando los archivos iniciales. Descargando un proyecto ya creado y modificarlo.","title":"\u00bfC\u00f3mo usar Git?"},{"location":"04_instalar_git/#configurar-informacion-en-git","text":"En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list","title":"Configurar informaci\u00f3n en Git"},{"location":"05_instalar_python/","text":"Instalaci\u00f3n de Python \u00b6 En esta gu\u00eda vamos a ver distintas formas de realizar la instalaci\u00f3n de la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puedan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para Python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos. \u00bfPor qu\u00e9 usar una herramienta para manejar versiones? \u00b6 La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Permitir tener instaladas m\u00faltiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python . La herramienta que vamos a usar es pyenv Linux y MacOS \u00b6 Instalaci\u00f3n con Git (Linux y MacOS) RECOMENDADA \u00b6 Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego reiniciar la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv . Uso de pyenv \u00b6 Para buscar que versi\u00f3n de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8 Instalaci\u00f3n con brew (MacOS) \u00b6 Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv Instalaci\u00f3n en Windows \u00b6 Desde instalador \u00b6 Descarga el instalador aqu\u00ed Warning Tener en cuenta de seleccionar el box de abajo para agregar el ejecutable de Python al PATH del sistema. Otros instaladores: https://www.python.org/downloads/release/python-368/ Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Instalar Python"},{"location":"05_instalar_python/#instalacion-de-python","text":"En esta gu\u00eda vamos a ver distintas formas de realizar la instalaci\u00f3n de la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puedan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para Python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos.","title":"Instalaci\u00f3n de Python"},{"location":"05_instalar_python/#por-que-usar-una-herramienta-para-manejar-versiones","text":"La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Permitir tener instaladas m\u00faltiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python . La herramienta que vamos a usar es pyenv","title":"\u00bfPor qu\u00e9 usar una herramienta para manejar versiones?"},{"location":"05_instalar_python/#linux-y-macos","text":"","title":"Linux y MacOS"},{"location":"05_instalar_python/#instalacion-con-git-linux-y-macos-recomendada","text":"Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego reiniciar la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv .","title":"Instalaci\u00f3n con Git (Linux y MacOS) RECOMENDADA"},{"location":"05_instalar_python/#uso-de-pyenv","text":"Para buscar que versi\u00f3n de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8","title":"Uso de pyenv"},{"location":"05_instalar_python/#instalacion-con-brew-macos","text":"Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv","title":"Instalaci\u00f3n con brew (MacOS)"},{"location":"05_instalar_python/#instalacion-en-windows","text":"","title":"Instalaci\u00f3n en Windows"},{"location":"05_instalar_python/#desde-instalador","text":"Descarga el instalador aqu\u00ed Warning Tener en cuenta de seleccionar el box de abajo para agregar el ejecutable de Python al PATH del sistema. Otros instaladores: https://www.python.org/downloads/release/python-368/ Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Desde instalador"},{"location":"06_manejo_de_paquetes/","text":"Manejo de paquetes en Python \u00b6 El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que queramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py Gu\u00eda completa aqu\u00ed \u00bfC\u00f3mo usar pip ? \u00b6 Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultima versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que queramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que queramos usar es tener un archivo donde poner toda las librer\u00edas que queramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"Manejo de Paquetes"},{"location":"06_manejo_de_paquetes/#manejo-de-paquetes-en-python","text":"El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que queramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py Gu\u00eda completa aqu\u00ed","title":"Manejo de paquetes en Python"},{"location":"06_manejo_de_paquetes/#como-usar-pip","text":"Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultima versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que queramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que queramos usar es tener un archivo donde poner toda las librer\u00edas que queramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"\u00bfC\u00f3mo usar pip?"},{"location":"07_entornos_virtuales/","text":"Entornos virtuales \u00b6 Virtualenv es una herramienta usada para crear un ambiente aislado de Python . Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv . Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que queramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que queramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad. \u00bfC\u00f3mo crear un entorno virtual? \u00b6 Primero necesitamos tener disponible la librer\u00eda virtualenv . La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado. \u00bfComo usar mi entorno virtual? \u00b6 Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el Python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"Entornos Virtuales"},{"location":"07_entornos_virtuales/#entornos-virtuales","text":"Virtualenv es una herramienta usada para crear un ambiente aislado de Python . Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv . Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que queramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que queramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad.","title":"Entornos virtuales"},{"location":"07_entornos_virtuales/#como-crear-un-entorno-virtual","text":"Primero necesitamos tener disponible la librer\u00eda virtualenv . La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado.","title":"\u00bfC\u00f3mo crear un entorno virtual?"},{"location":"07_entornos_virtuales/#como-usar-mi-entorno-virtual","text":"Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el Python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"\u00bfComo usar mi entorno virtual?"},{"location":"08_merge_request/","text":"Merge Request Gitlab \u00b6 En esta gu\u00eda vamos a mostrar como realizar un Merge Request dentro de Gitlab . El uso de Merge Request puede aportar mucho en el proceso de desarrollo por varios motivos entre los que se destacan: Ayuda a que todo el equipo se mantenga al tanto de los cambios. Sirve para realizar la t\u00e9cnica de Code Review . Permite abrir una discusi\u00f3n o debate sobre la implementaci\u00f3n de una nueva funcionalidad. Aqu\u00ed la documentaci\u00f3n oficial de Gitlab con mucho material sobre los Merge Request . En esta gu\u00eda veremos lo b\u00e1sico de la creaci\u00f3n de un MR y el proceso de aprobaci\u00f3n. Crear un nuevo MR \u00b6 Para crear un nuevo MR vamos al apartado Merge Request del men\u00fa de nuestro proyecto. Dentro de ese apartado clickear la opci\u00f3n \"Nueva solicitud de fusi\u00f3n\" . En la siguiente ventana vamos a poder seleccionar cual es la rama origen y cual la rama destino que queremos fusionar. Luego de elegir las ramas que queremos fusionar podemos ver algo as\u00ed: Es necesario confirmar para pasar a la siguiente secci\u00f3n donde vamos a tener un formulario para completar con informaci\u00f3n \u00fatil para el Merge Request . Podemos ponerle una descripci\u00f3n, asignarlo a un compa\u00f1ero para que lo revise, asociarlo a un milestone particular, agregarle etiquetas y configurar unas opciones propias del MR como borrar la rama origen cuando se realice y usar la estrategia squash para el merge de nuestros commits . Adem\u00e1s, se ve el resumen de los commits que se van a agregar a la rama destino y una pesta\u00f1a con los cambios que se van a realizar en los archivos. Para confirmar la creaci\u00f3n del MR se debe hacer submit con el bot\u00f3n \"Submit merge request\" . Confirmar MR \u00b6 Una vez confirmado pasamos a la vista del Merge Request creado donde se pueden visualizar los cambios, comentar, aprobar los cambios y finalmente realizar el merge . Algunas veces la rama que queremos funcionar puede tener conflictos. Estos conflictos Gitlab no los puede resolver, entonces no queda mas que avisar del problema, pedir que se resuelvan para poder realizar el merge . Para resolver estos conflictos tenemos que traernos a la rama origen los cambios de la rama destino, es decir, hacemos un merge en sentido contrario. Luego queda resolver los conflictos que ocurran para luego hacer un push en nuestra rama origen. Si todo sale bien, al volver a la ventana anterior ahora vamos a ver esto: Ahora podemos realizar el merge sin ning\u00fan problema.","title":"Merge Requests en Gitlab"},{"location":"08_merge_request/#merge-request-gitlab","text":"En esta gu\u00eda vamos a mostrar como realizar un Merge Request dentro de Gitlab . El uso de Merge Request puede aportar mucho en el proceso de desarrollo por varios motivos entre los que se destacan: Ayuda a que todo el equipo se mantenga al tanto de los cambios. Sirve para realizar la t\u00e9cnica de Code Review . Permite abrir una discusi\u00f3n o debate sobre la implementaci\u00f3n de una nueva funcionalidad. Aqu\u00ed la documentaci\u00f3n oficial de Gitlab con mucho material sobre los Merge Request . En esta gu\u00eda veremos lo b\u00e1sico de la creaci\u00f3n de un MR y el proceso de aprobaci\u00f3n.","title":"Merge Request Gitlab"},{"location":"08_merge_request/#crear-un-nuevo-mr","text":"Para crear un nuevo MR vamos al apartado Merge Request del men\u00fa de nuestro proyecto. Dentro de ese apartado clickear la opci\u00f3n \"Nueva solicitud de fusi\u00f3n\" . En la siguiente ventana vamos a poder seleccionar cual es la rama origen y cual la rama destino que queremos fusionar. Luego de elegir las ramas que queremos fusionar podemos ver algo as\u00ed: Es necesario confirmar para pasar a la siguiente secci\u00f3n donde vamos a tener un formulario para completar con informaci\u00f3n \u00fatil para el Merge Request . Podemos ponerle una descripci\u00f3n, asignarlo a un compa\u00f1ero para que lo revise, asociarlo a un milestone particular, agregarle etiquetas y configurar unas opciones propias del MR como borrar la rama origen cuando se realice y usar la estrategia squash para el merge de nuestros commits . Adem\u00e1s, se ve el resumen de los commits que se van a agregar a la rama destino y una pesta\u00f1a con los cambios que se van a realizar en los archivos. Para confirmar la creaci\u00f3n del MR se debe hacer submit con el bot\u00f3n \"Submit merge request\" .","title":"Crear un nuevo MR"},{"location":"08_merge_request/#confirmar-mr","text":"Una vez confirmado pasamos a la vista del Merge Request creado donde se pueden visualizar los cambios, comentar, aprobar los cambios y finalmente realizar el merge . Algunas veces la rama que queremos funcionar puede tener conflictos. Estos conflictos Gitlab no los puede resolver, entonces no queda mas que avisar del problema, pedir que se resuelvan para poder realizar el merge . Para resolver estos conflictos tenemos que traernos a la rama origen los cambios de la rama destino, es decir, hacemos un merge en sentido contrario. Luego queda resolver los conflictos que ocurran para luego hacer un push en nuestra rama origen. Si todo sale bien, al volver a la ventana anterior ahora vamos a ver esto: Ahora podemos realizar el merge sin ning\u00fan problema.","title":"Confirmar MR"},{"location":"09_template/","text":"Aplicaci\u00f3n Base \u00b6 En la siguiente gu\u00eda se va a explicar sobre la aplicaci\u00f3n base brindada por la c\u00e1tedra. Versiones en el Server \u00b6 Python: 3.6.x Mysql: 10.1.44-MariaDB Requsitos \u00b6 Tener instalado Python en su sistema. Con las librer\u00edas pip y virtualenv Tener instalada de forma local una base de datos MySQL o MariaDB. Dependencias \u00b6 Las dependencias del proyecto se encuentran en el archivo requirements.txt : Flask v1.0.2 -> web framework PyMysql v0.9.2 -> conexi\u00f3n a la base Flask-Session v0.3 -> sesiones almacenadas en el servidor Cuando vayan agregando nuevas dependencias con el manejador de paquetes de python (pip), es necesario que se vayan agregando en archivo para que luego sus compa\u00f1eros/as o en producci\u00f3n puedan instalarse las mismas. Se pueden ingresar editando el archivo y guard\u00e1ndolo 'paquete'=='numero de versi\u00f3n' como por ejemplo Flask==1.0.2 . Para m\u00e1s ejemplos revisar el archivo requirements.txt en la aplicaci\u00f3n template. Archivos y directorios importantes \u00b6 En el ra\u00edz de nuestra template van a encontrar los siguientes archivos y directorios: Directorio ra\u00edz \u00b6 $ tree -L 1 . \u251c\u2500\u2500 app # directorio principal de c\u00f3digo. \u251c\u2500\u2500 config.py # m\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n. \u251c\u2500\u2500 db # directorio con dump inicial de la base de datos. \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt # listado de dependencias. \u2514\u2500\u2500 run.py # entry point. App \u00b6 tree -L 2 . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 db.py # m\u00f3dulo de conexi\u00f3n con la base de datos. \u2502 \u251c\u2500\u2500 helpers # directorio con funciones auxiliares. \u2502 \u251c\u2500\u2500 __init__.py # m\u00f3dulo principal. \u2502 \u251c\u2500\u2500 models # directorio con los modelos (Models). \u2502 \u251c\u2500\u2500 resources # directorio de los controladores (Controllers). \u2502 \u251c\u2500\u2500 static # directorio de archivos est\u00e1ticos. \u2502 \u2514\u2500\u2500 templates # directorio de templates (Views). \u251c\u2500\u2500 config.py \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 schema.sql \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 run.py Helpers \u00b6 Es el directorio que tiene funciones auxiliares de la aplicaci\u00f3n. Generalmente aqu\u00ed se encuentra el c\u00f3digo que no son parte principal del negocio de la aplicaci\u00f3n pero que se usan en distintas partes del c\u00f3digo. En este caso se pueden ver funciones para el manejo de los errores dentro del archivo handler.py y en auth.py tenemos una funci\u00f3n para la verificaci\u00f3n de sesi\u00f3n. Models \u00b6 Aqu\u00ed se encuentra el c\u00f3digo referido a la l\u00f3gica de aplicaci\u00f3n concreta. En general son lo modelos que interact\u00faan con la base de datos y realizan l\u00f3gica de negocio. Resources \u00b6 Este directorio tiene los controladores de la aplicaci\u00f3n. Los controladores tiene l\u00f3gica de la aplicaci\u00f3n relacionada con la web. Hace de enlace entre la l\u00f3gica de aplicaci\u00f3n y la de generaci\u00f3n de las vistas. En el subdirectorio /api se encuentran los controladores que devuelven los recursos en formato json . Static \u00b6 Aqu\u00ed se colocan los archivos est\u00e1ticos y que queremos que puedan ser accedidos p\u00fablicamente en nuestra aplicaci\u00f3n, como pueden ser hojas de estilo, scripts js e im\u00e1genes. Templates \u00b6 Directorio de los archivos de template de Jinja2. En general se suele crear un subdirectorio por cada uno de los controladores creados en resources . Seria como las vistas en el modelo MVC. Archivo __init__.py \u00b6 Este es el archivo principal de la aplicaci\u00f3n que la inicializa y la configura. En las misma se encuentra una funci\u00f3n llamada create_app que realiza toda la configuraci\u00f3n: Crea la aplicaci\u00f3n flask . Levanta la configuraci\u00f3n desde el m\u00f3dulo config.py seg\u00fan el environment . Configura las sesiones, la base de datos y el motor de templates. Configura todas las rutas de la aplicaci\u00f3n. Se registran los manejadores en caso de error. Configuraci\u00f3n \u00b6 El m\u00f3dulo de configuraci\u00f3n se encuentra en el archivo config.py . El mismo contiene una clase para cada uno de los entornos de ejecuci\u00f3n de la aplicaci\u00f3n o enviroments . En la clase DevelopmentConfig se debe configurar los par\u00e1metros para la ejecuci\u00f3n local de cada desarrollador. La clase est\u00e1 preparada para que cada desarrollador agregue en variables de entorno los valores particulares de cada entorno local. En ProductionConfig se colocan los valores para ejecutar la aplicaci\u00f3n en el entorno del server remoto. Tambi\u00e9n esta preparada para tomar los valores de variables de entorno, pero en este caso se debe agregar como valores por default los datos que se les otorgaron de la base . Esto \u00faltimo es muy importante dado que en el servidor no se encuentran a agregadas las variables de entorno. Ejecuci\u00f3n \u00b6 La ejecuci\u00f3n de la aplicaci\u00f3n se realiza desde el archivo run.py que instancia la aplicaci\u00f3n y la ejecuta. from app import create_app if __name__ == \"__main__\" : app = create_app () app . run () Es necesario para la correcta ejecuci\u00f3n configurar la variable de entorno FLASK_ENV que se toma como par\u00e1metro para realizar la carga de la configuraci\u00f3n de nuestra aplicaci\u00f3n. Para ejecutar el ambiente local como ambiente de desarrollo la manera seria la siguiente: FLASK_ENV=development python run.py \u00bfC\u00f3mo usar el template? \u00b6 Descargar del repositorio el \u00faltimo tag o clonarlo desde el repositorio . Copiar los archivos de la aplicacion template a dentro del respositorio de su proyecto (si tienen visibles los archivos ocultos, no hay que copiar el directorio .git aunque s\u00ed es recomendable copiar el archivo .gitignore ). Cargar el archivo db/schema.sql en su base de datos local. Es importante cargar este archivo sino la aplicacion no funcionara. Para eso pueden utilizar un cliente de base de datos como por ejemplo: phpMyAdmin o mysql workbench o la misma command line de mysql: mysql -h \"host\" -u \"user\" -p \"password\" \"database\" < db/schema.sql Configurar correctamente la clase DevelopmentConfig con los valores del entorno local del proyecto. Crear un entorno virtual dentro de nuestro proyecto es necesario ejecutar lo siguiente: virtualenv venv Activar nuestro entorno virtual: . venv/bin/activate Instalar los paquetes de nuestra aplicaci\u00f3n: pip install -r requirements.txt Para ejecutar la aplicaci\u00f3n indicando el entorno: FLASK_ENV = development python run.py * Serving Flask app \"app\" ( lazy loading ) * Environment: development * Debug mode: on * Running on http://127.0.0.1:5000/ ( Press CTRL+C to quit ) * Restarting with stat * Debugger is active! * Debugger PIN: 112 -188-961 El proyecto queda ejecutandose en el puerto 5000 , en un navegador acceder a http://localhost:5000","title":"Aplicaci\u00f3n Base"},{"location":"09_template/#aplicacion-base","text":"En la siguiente gu\u00eda se va a explicar sobre la aplicaci\u00f3n base brindada por la c\u00e1tedra.","title":"Aplicaci\u00f3n Base"},{"location":"09_template/#versiones-en-el-server","text":"Python: 3.6.x Mysql: 10.1.44-MariaDB","title":"Versiones en el Server"},{"location":"09_template/#requsitos","text":"Tener instalado Python en su sistema. Con las librer\u00edas pip y virtualenv Tener instalada de forma local una base de datos MySQL o MariaDB.","title":"Requsitos"},{"location":"09_template/#dependencias","text":"Las dependencias del proyecto se encuentran en el archivo requirements.txt : Flask v1.0.2 -> web framework PyMysql v0.9.2 -> conexi\u00f3n a la base Flask-Session v0.3 -> sesiones almacenadas en el servidor Cuando vayan agregando nuevas dependencias con el manejador de paquetes de python (pip), es necesario que se vayan agregando en archivo para que luego sus compa\u00f1eros/as o en producci\u00f3n puedan instalarse las mismas. Se pueden ingresar editando el archivo y guard\u00e1ndolo 'paquete'=='numero de versi\u00f3n' como por ejemplo Flask==1.0.2 . Para m\u00e1s ejemplos revisar el archivo requirements.txt en la aplicaci\u00f3n template.","title":"Dependencias"},{"location":"09_template/#archivos-y-directorios-importantes","text":"En el ra\u00edz de nuestra template van a encontrar los siguientes archivos y directorios:","title":"Archivos y directorios importantes"},{"location":"09_template/#directorio-raiz","text":"$ tree -L 1 . \u251c\u2500\u2500 app # directorio principal de c\u00f3digo. \u251c\u2500\u2500 config.py # m\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n. \u251c\u2500\u2500 db # directorio con dump inicial de la base de datos. \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt # listado de dependencias. \u2514\u2500\u2500 run.py # entry point.","title":"Directorio ra\u00edz"},{"location":"09_template/#app","text":"tree -L 2 . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 db.py # m\u00f3dulo de conexi\u00f3n con la base de datos. \u2502 \u251c\u2500\u2500 helpers # directorio con funciones auxiliares. \u2502 \u251c\u2500\u2500 __init__.py # m\u00f3dulo principal. \u2502 \u251c\u2500\u2500 models # directorio con los modelos (Models). \u2502 \u251c\u2500\u2500 resources # directorio de los controladores (Controllers). \u2502 \u251c\u2500\u2500 static # directorio de archivos est\u00e1ticos. \u2502 \u2514\u2500\u2500 templates # directorio de templates (Views). \u251c\u2500\u2500 config.py \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 schema.sql \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 run.py","title":"App"},{"location":"09_template/#helpers","text":"Es el directorio que tiene funciones auxiliares de la aplicaci\u00f3n. Generalmente aqu\u00ed se encuentra el c\u00f3digo que no son parte principal del negocio de la aplicaci\u00f3n pero que se usan en distintas partes del c\u00f3digo. En este caso se pueden ver funciones para el manejo de los errores dentro del archivo handler.py y en auth.py tenemos una funci\u00f3n para la verificaci\u00f3n de sesi\u00f3n.","title":"Helpers"},{"location":"09_template/#models","text":"Aqu\u00ed se encuentra el c\u00f3digo referido a la l\u00f3gica de aplicaci\u00f3n concreta. En general son lo modelos que interact\u00faan con la base de datos y realizan l\u00f3gica de negocio.","title":"Models"},{"location":"09_template/#resources","text":"Este directorio tiene los controladores de la aplicaci\u00f3n. Los controladores tiene l\u00f3gica de la aplicaci\u00f3n relacionada con la web. Hace de enlace entre la l\u00f3gica de aplicaci\u00f3n y la de generaci\u00f3n de las vistas. En el subdirectorio /api se encuentran los controladores que devuelven los recursos en formato json .","title":"Resources"},{"location":"09_template/#static","text":"Aqu\u00ed se colocan los archivos est\u00e1ticos y que queremos que puedan ser accedidos p\u00fablicamente en nuestra aplicaci\u00f3n, como pueden ser hojas de estilo, scripts js e im\u00e1genes.","title":"Static"},{"location":"09_template/#templates","text":"Directorio de los archivos de template de Jinja2. En general se suele crear un subdirectorio por cada uno de los controladores creados en resources . Seria como las vistas en el modelo MVC.","title":"Templates"},{"location":"09_template/#archivo-__init__py","text":"Este es el archivo principal de la aplicaci\u00f3n que la inicializa y la configura. En las misma se encuentra una funci\u00f3n llamada create_app que realiza toda la configuraci\u00f3n: Crea la aplicaci\u00f3n flask . Levanta la configuraci\u00f3n desde el m\u00f3dulo config.py seg\u00fan el environment . Configura las sesiones, la base de datos y el motor de templates. Configura todas las rutas de la aplicaci\u00f3n. Se registran los manejadores en caso de error.","title":"Archivo __init__.py"},{"location":"09_template/#configuracion","text":"El m\u00f3dulo de configuraci\u00f3n se encuentra en el archivo config.py . El mismo contiene una clase para cada uno de los entornos de ejecuci\u00f3n de la aplicaci\u00f3n o enviroments . En la clase DevelopmentConfig se debe configurar los par\u00e1metros para la ejecuci\u00f3n local de cada desarrollador. La clase est\u00e1 preparada para que cada desarrollador agregue en variables de entorno los valores particulares de cada entorno local. En ProductionConfig se colocan los valores para ejecutar la aplicaci\u00f3n en el entorno del server remoto. Tambi\u00e9n esta preparada para tomar los valores de variables de entorno, pero en este caso se debe agregar como valores por default los datos que se les otorgaron de la base . Esto \u00faltimo es muy importante dado que en el servidor no se encuentran a agregadas las variables de entorno.","title":"Configuraci\u00f3n"},{"location":"09_template/#ejecucion","text":"La ejecuci\u00f3n de la aplicaci\u00f3n se realiza desde el archivo run.py que instancia la aplicaci\u00f3n y la ejecuta. from app import create_app if __name__ == \"__main__\" : app = create_app () app . run () Es necesario para la correcta ejecuci\u00f3n configurar la variable de entorno FLASK_ENV que se toma como par\u00e1metro para realizar la carga de la configuraci\u00f3n de nuestra aplicaci\u00f3n. Para ejecutar el ambiente local como ambiente de desarrollo la manera seria la siguiente: FLASK_ENV=development python run.py","title":"Ejecuci\u00f3n"},{"location":"09_template/#como-usar-el-template","text":"Descargar del repositorio el \u00faltimo tag o clonarlo desde el repositorio . Copiar los archivos de la aplicacion template a dentro del respositorio de su proyecto (si tienen visibles los archivos ocultos, no hay que copiar el directorio .git aunque s\u00ed es recomendable copiar el archivo .gitignore ). Cargar el archivo db/schema.sql en su base de datos local. Es importante cargar este archivo sino la aplicacion no funcionara. Para eso pueden utilizar un cliente de base de datos como por ejemplo: phpMyAdmin o mysql workbench o la misma command line de mysql: mysql -h \"host\" -u \"user\" -p \"password\" \"database\" < db/schema.sql Configurar correctamente la clase DevelopmentConfig con los valores del entorno local del proyecto. Crear un entorno virtual dentro de nuestro proyecto es necesario ejecutar lo siguiente: virtualenv venv Activar nuestro entorno virtual: . venv/bin/activate Instalar los paquetes de nuestra aplicaci\u00f3n: pip install -r requirements.txt Para ejecutar la aplicaci\u00f3n indicando el entorno: FLASK_ENV = development python run.py * Serving Flask app \"app\" ( lazy loading ) * Environment: development * Debug mode: on * Running on http://127.0.0.1:5000/ ( Press CTRL+C to quit ) * Restarting with stat * Debugger is active! * Debugger PIN: 112 -188-961 El proyecto queda ejecutandose en el puerto 5000 , en un navegador acceder a http://localhost:5000","title":"\u00bfC\u00f3mo usar el template?"}]}