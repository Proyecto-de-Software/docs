{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proyecto de Software 2020 \u00b6 En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Home"},{"location":"#proyecto-de-software-2020","text":"En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Proyecto de Software 2020"},{"location":"commands/","text":"Comandos \u00b6 En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows. Comandos de consola \u00b6 pwd # Imprime el directorio actual. ls # Lista todos los archivos y directorios del directorio actual. ls -a # Igual que el anterior pero unlcuye los ocultos. mkdir dirname # Crea un nuevo directorio en el actual llamado \"dirname\". touch filename # Crea un archivo en el directorio actual llamado \"filename\". cd code/python # Se nueve al directorio \"code/python\". Comandos de git \u00b6 git status # Muestra el estado de los archivos respecto al repositorio. git add <filename> # Agrega el archivo filename al versionado de git. git add . # Agrega todos los archivos que sufieron una modificaci\u00f3n el versionado. git commit -m <mensaje> # Genera un commit con todos los archivos que fueron modificados y gregados a git. Documenta el commit con el mensaje que escribamos. git checkout -b <branch_name> # Genera una nueva rama localmente con el nombre <branch_name>. Y se mueve a esa rama. git checkout <branch_name> # Se mueve a la rama <branch_name> local y si no existe la crea y se mueve. git push origin <branch_name> # Se suben los commits locales a la rama <branch_name> ubicada en el remote con nombre origin. git pull origin <branch_name> # Descarga los commits que est\u00e9n en la rama del remote origin para la rama <branch_name>.","title":"Comandos"},{"location":"commands/#comandos","text":"En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows.","title":"Comandos"},{"location":"commands/#comandos-de-consola","text":"pwd # Imprime el directorio actual. ls # Lista todos los archivos y directorios del directorio actual. ls -a # Igual que el anterior pero unlcuye los ocultos. mkdir dirname # Crea un nuevo directorio en el actual llamado \"dirname\". touch filename # Crea un archivo en el directorio actual llamado \"filename\". cd code/python # Se nueve al directorio \"code/python\".","title":"Comandos de consola"},{"location":"commands/#comandos-de-git","text":"git status # Muestra el estado de los archivos respecto al repositorio. git add <filename> # Agrega el archivo filename al versionado de git. git add . # Agrega todos los archivos que sufieron una modificaci\u00f3n el versionado. git commit -m <mensaje> # Genera un commit con todos los archivos que fueron modificados y gregados a git. Documenta el commit con el mensaje que escribamos. git checkout -b <branch_name> # Genera una nueva rama localmente con el nombre <branch_name>. Y se mueve a esa rama. git checkout <branch_name> # Se mueve a la rama <branch_name> local y si no existe la crea y se mueve. git push origin <branch_name> # Se suben los commits locales a la rama <branch_name> ubicada en el remote con nombre origin. git pull origin <branch_name> # Descarga los commits que est\u00e9n en la rama del remote origin para la rama <branch_name>.","title":"Comandos de git"},{"location":"ssh/","text":"SSH \u00b6 La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor. Requisitos \u00b6 Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash. Generaci\u00f3n de clave \u00b6 Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este password no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando bash ssh-keygen -p -f /path/to/ssh_key Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+","title":"Ssh"},{"location":"ssh/#ssh","text":"La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor.","title":"SSH"},{"location":"ssh/#requisitos","text":"Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash.","title":"Requisitos"},{"location":"ssh/#generacion-de-clave","text":"Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este password no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando bash ssh-keygen -p -f /path/to/ssh_key Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+","title":"Generaci\u00f3n de clave"}]}