{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"01_index/","text":"Proyecto de Software 2020 \u00b6 En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Home"},{"location":"01_index/#proyecto-de-software-2020","text":"En este site se encuentran las gu\u00edas para para la realizaci\u00f3n de actividades y del trabajo de la asignatura Proyecto de Software 2020.","title":"Proyecto de Software 2020"},{"location":"02_commands/","text":"Comandos \u00b6 En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows. Comandos de consola \u00b6 # Imprimir el directorio actual. pwd # Listar todos los archivos y directorios del directorio actual. ls # Igual que el anterior pero incluye los ocultos. ls -a # Crear un nuevo directorio en el actual llamado \"dirname\". mkdir dirname # Crear un archivo en el directorio actual llamado \"filename\". touch filename # Moverse al directorio \"code/python\". cd code/python Comandos de git \u00b6 # Mostrar el estado de los archivos respecto al repositorio. git status # Agregar el archivo filename al versionado de git. git add <filename> # Agregae todos los archivos que sufieron una modificaci\u00f3n al versionado. git add . # Generar un commit con todos los archivos que fueron modificados y gregados a # git. Documenta el commit con el mensaje que escribamos. git commit -m <mensaje> # Generar una nueva rama localmente con el nombre <branch_name>. Y moverse a # esa rama. git checkout -b <branch_name> # Moverse a la rama <branch_name> local y si no existe la crea y se mueve. git checkout <branch_name> # Subir los cambios en commits locales a la rama <branch_name> ubicada en el # remote con nombre origin. git push origin <branch_name> # Descargar cambios en commits que est\u00e9n en la rama del remote origin para la # rama <branch_name>. git pull origin <branch_name> # Fusionar la rama <branch_name> dentro de la rama actual. git merge <branch_name>","title":"Comandos"},{"location":"02_commands/#comandos","text":"En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows.","title":"Comandos"},{"location":"02_commands/#comandos-de-consola","text":"# Imprimir el directorio actual. pwd # Listar todos los archivos y directorios del directorio actual. ls # Igual que el anterior pero incluye los ocultos. ls -a # Crear un nuevo directorio en el actual llamado \"dirname\". mkdir dirname # Crear un archivo en el directorio actual llamado \"filename\". touch filename # Moverse al directorio \"code/python\". cd code/python","title":"Comandos de consola"},{"location":"02_commands/#comandos-de-git","text":"# Mostrar el estado de los archivos respecto al repositorio. git status # Agregar el archivo filename al versionado de git. git add <filename> # Agregae todos los archivos que sufieron una modificaci\u00f3n al versionado. git add . # Generar un commit con todos los archivos que fueron modificados y gregados a # git. Documenta el commit con el mensaje que escribamos. git commit -m <mensaje> # Generar una nueva rama localmente con el nombre <branch_name>. Y moverse a # esa rama. git checkout -b <branch_name> # Moverse a la rama <branch_name> local y si no existe la crea y se mueve. git checkout <branch_name> # Subir los cambios en commits locales a la rama <branch_name> ubicada en el # remote con nombre origin. git push origin <branch_name> # Descargar cambios en commits que est\u00e9n en la rama del remote origin para la # rama <branch_name>. git pull origin <branch_name> # Fusionar la rama <branch_name> dentro de la rama actual. git merge <branch_name>","title":"Comandos de git"},{"location":"03_ssh/","text":"SSH \u00b6 La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor. Requisitos \u00b6 Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash. Generaci\u00f3n de clave \u00b6 Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este password no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando bash ssh-keygen -p -f /path/to/ssh_key Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+ Tus claves fueron generadas en el directorio /your_home/.ssh : /your_home/.ssh/id_rsa.pub es tu clave p\u00fablica, y la que deber\u00e1s configurar en los servicios que quieras hacer uso con este mecanismo. /your_home/.ssh/id_rsa , es tu clave privada. Es importante que no pierdas nunca este archivo ya que no vas a poder recuperarlo. Adem\u00e1s tampoco debes compartir el mismo ya que cualquier persona con dicha clave podr\u00eda tomar tu identidad. En nuesto caso, la clave p\u00fablica deber\u00e1 ser configurada en el servicio de Gitlab para autenticarnos de forma autom\u00e1tica a la hora de interactuar con el repositorio. Esto evita que tengamos que ingresar usuario y clave en cada operaci\u00f3n. En la siguiente gu\u00eda se explica como dar de alta nuestra clave ssh en Gitlab","title":"Ssh"},{"location":"03_ssh/#ssh","text":"La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor.","title":"SSH"},{"location":"03_ssh/#requisitos","text":"Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash.","title":"Requisitos"},{"location":"03_ssh/#generacion-de-clave","text":"Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este password no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando bash ssh-keygen -p -f /path/to/ssh_key Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+ Tus claves fueron generadas en el directorio /your_home/.ssh : /your_home/.ssh/id_rsa.pub es tu clave p\u00fablica, y la que deber\u00e1s configurar en los servicios que quieras hacer uso con este mecanismo. /your_home/.ssh/id_rsa , es tu clave privada. Es importante que no pierdas nunca este archivo ya que no vas a poder recuperarlo. Adem\u00e1s tampoco debes compartir el mismo ya que cualquier persona con dicha clave podr\u00eda tomar tu identidad. En nuesto caso, la clave p\u00fablica deber\u00e1 ser configurada en el servicio de Gitlab para autenticarnos de forma autom\u00e1tica a la hora de interactuar con el repositorio. Esto evita que tengamos que ingresar usuario y clave en cada operaci\u00f3n. En la siguiente gu\u00eda se explica como dar de alta nuestra clave ssh en Gitlab","title":"Generaci\u00f3n de clave"},{"location":"04_ssh_gitlab/","text":"","title":"Ssh Gitlab"},{"location":"05_instalar_git/","text":"Gu\u00eda de Git \u00b6 En la explicaci\u00f3n pr\u00e1ctica hablamos sobre los conceptos de git. Aqu\u00ed est\u00e1n las diapositivas . Instalaci\u00f3n \u00b6 Warning Tener en cuenta que esta gu\u00eda de instalaci\u00f3n de git no hace falta si se utilza la m\u00e1quina virtual que entregamos en la c\u00e1tedra para trabajar dado que tiene todo instalado. La m\u00e1quina vistual la pueden descargar desde aqu\u00ed En Debian-based \u00b6 sudo apt update sudo apt upgrade sudo apt install git En Red Hat-based \u00b6 sudo yum upgrade sudo yum install git En MacOS \u00b6 brew install git En Windows \u00b6 Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale. Crear una cuenta de Github \u00b6 Para crear una cuenta tienen que entrar a la web de Github y regitrarse (Sing up). \u00bfC\u00f3mo usar Git? \u00b6 Vamos a ver dos formas para comenzar a trabajar con Git : Creando un repositorio desde cero y agregando los archivos iniciales. Descargando un proyecto ya creado y modificarlo. Configurar informaci\u00f3n en Git \u00b6 En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list","title":"Instalar Git"},{"location":"05_instalar_git/#guia-de-git","text":"En la explicaci\u00f3n pr\u00e1ctica hablamos sobre los conceptos de git. Aqu\u00ed est\u00e1n las diapositivas .","title":"Gu\u00eda de Git"},{"location":"05_instalar_git/#instalacion","text":"Warning Tener en cuenta que esta gu\u00eda de instalaci\u00f3n de git no hace falta si se utilza la m\u00e1quina virtual que entregamos en la c\u00e1tedra para trabajar dado que tiene todo instalado. La m\u00e1quina vistual la pueden descargar desde aqu\u00ed","title":"Instalaci\u00f3n"},{"location":"05_instalar_git/#en-debian-based","text":"sudo apt update sudo apt upgrade sudo apt install git","title":"En Debian-based"},{"location":"05_instalar_git/#en-red-hat-based","text":"sudo yum upgrade sudo yum install git","title":"En Red Hat-based"},{"location":"05_instalar_git/#en-macos","text":"brew install git","title":"En MacOS"},{"location":"05_instalar_git/#en-windows","text":"Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale.","title":"En Windows"},{"location":"05_instalar_git/#crear-una-cuenta-de-github","text":"Para crear una cuenta tienen que entrar a la web de Github y regitrarse (Sing up).","title":"Crear una cuenta de Github"},{"location":"05_instalar_git/#como-usar-git","text":"Vamos a ver dos formas para comenzar a trabajar con Git : Creando un repositorio desde cero y agregando los archivos iniciales. Descargando un proyecto ya creado y modificarlo.","title":"\u00bfC\u00f3mo usar Git?"},{"location":"05_instalar_git/#configurar-informacion-en-git","text":"En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list","title":"Configurar informaci\u00f3n en Git"},{"location":"06_instalar_python/","text":"Instalaci\u00f3n de Python \u00b6 Warning Tener en cuenta que esta gu\u00eda de instalaci\u00f3n de Python no hace falta si se utilza la m\u00e1quina virtual que entregamos en la c\u00e1tedra para trabajar dado que tiene todo instalado. La m\u00e1quina vistual la pueden descargar desde aqu\u00ed En esta gu\u00eda vamos a ver disintas formas de realizar la instalaci\u00f3n de la la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puadan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos. \u00bfPor qu\u00e9 usar una herramienta para menejar versiones? \u00b6 La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Tener instaladas multiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python. La herramienta que vamos a usar es pyenv Linux y MacOS \u00b6 Instalaci\u00f3n con Git (Linux y MacOS) RECOMENDADA \u00b6 Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego restartea la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv . Uso de pyenv \u00b6 Para buscar que version de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8 Instalaci\u00f3n con brew (MacOS) \u00b6 Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv Instalaci\u00f3n en Windows \u00b6 Desde instalador \u00b6 Descarga el instalador aqu\u00ed Warning Tener en cuenta de seleccionar el box de abajo para agregar el ejecutable de Python al PATH del sistema. Otros instaladores: https://www.python.org/downloads/release/python-368/ Conclusi\u00f3n \u00b6 Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Instalar Python"},{"location":"06_instalar_python/#instalacion-de-python","text":"Warning Tener en cuenta que esta gu\u00eda de instalaci\u00f3n de Python no hace falta si se utilza la m\u00e1quina virtual que entregamos en la c\u00e1tedra para trabajar dado que tiene todo instalado. La m\u00e1quina vistual la pueden descargar desde aqu\u00ed En esta gu\u00eda vamos a ver disintas formas de realizar la instalaci\u00f3n de la la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puadan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos.","title":"Instalaci\u00f3n de Python"},{"location":"06_instalar_python/#por-que-usar-una-herramienta-para-menejar-versiones","text":"La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Tener instaladas multiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python. La herramienta que vamos a usar es pyenv","title":"\u00bfPor qu\u00e9 usar una herramienta para menejar versiones?"},{"location":"06_instalar_python/#linux-y-macos","text":"","title":"Linux y MacOS"},{"location":"06_instalar_python/#instalacion-con-git-linux-y-macos-recomendada","text":"Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego restartea la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv .","title":"Instalaci\u00f3n con Git (Linux y MacOS) RECOMENDADA"},{"location":"06_instalar_python/#uso-de-pyenv","text":"Para buscar que version de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8","title":"Uso de pyenv"},{"location":"06_instalar_python/#instalacion-con-brew-macos","text":"Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv","title":"Instalaci\u00f3n con brew (MacOS)"},{"location":"06_instalar_python/#instalacion-en-windows","text":"","title":"Instalaci\u00f3n en Windows"},{"location":"06_instalar_python/#desde-instalador","text":"Descarga el instalador aqu\u00ed Warning Tener en cuenta de seleccionar el box de abajo para agregar el ejecutable de Python al PATH del sistema. Otros instaladores: https://www.python.org/downloads/release/python-368/","title":"Desde instalador"},{"location":"06_instalar_python/#conclusion","text":"Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Conclusi\u00f3n"},{"location":"07_manejo_de_paquetes/","text":"Manejo de paquetes en Python \u00b6 El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que querramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py Gu\u00eda completa aqu\u00ed \u00bfC\u00f3mo usar pip ? \u00b6 Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultipa versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que querramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que querramos usar es tener un archivo donde poner toda las librer\u00edas que querramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"Manejo de Paquetes"},{"location":"07_manejo_de_paquetes/#manejo-de-paquetes-en-python","text":"El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que querramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py Gu\u00eda completa aqu\u00ed","title":"Manejo de paquetes en Python"},{"location":"07_manejo_de_paquetes/#como-usar-pip","text":"Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultipa versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que querramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que querramos usar es tener un archivo donde poner toda las librer\u00edas que querramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"\u00bfC\u00f3mo usar pip?"},{"location":"08_entornos_virtuales/","text":"Entornos virtuales \u00b6 Virtualenv es una herramienta usada para crear un ambiente aislado de Python. Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv. Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que querramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que querramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad. \u00bfC\u00f3mo crear un entorno virtual? \u00b6 Primero necesitamos tener disponible la librer\u00eda virtualenv. La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado. \u00bfComo usar mi entorno virtual? \u00b6 Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"Entornos Virtuales"},{"location":"08_entornos_virtuales/#entornos-virtuales","text":"Virtualenv es una herramienta usada para crear un ambiente aislado de Python. Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv. Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que querramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que querramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad.","title":"Entornos virtuales"},{"location":"08_entornos_virtuales/#como-crear-un-entorno-virtual","text":"Primero necesitamos tener disponible la librer\u00eda virtualenv. La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado.","title":"\u00bfC\u00f3mo crear un entorno virtual?"},{"location":"08_entornos_virtuales/#como-usar-mi-entorno-virtual","text":"Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"\u00bfComo usar mi entorno virtual?"}]}